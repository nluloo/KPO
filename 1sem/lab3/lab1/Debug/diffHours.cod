; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33134.0 

	TITLE	D:\labs\êïî\lab1\lab1\Debug\diffHours.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__5CD2C691_concurrencysal@h DB 01H
__AC907F0D_sal@h DB 01H
__25E6C1AF_vadefs@h DB 01H
__1BAD82EE_vcruntime@h DB 01H
__FF70C7F3_xkeycheck@h DB 01H
__83726EB0_yvals_core@h DB 01H
__1B0272D9_corecrt@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__0A9237D2_time@h DB 01H
__0899EDB2_ctime DB 01H
__F4663A99_diffHours@h DB 01H
__15E0FBAC_diffHours@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?diff_hours@@YA_JH_N@Z				; diff_hours
PUBLIC	__JustMyCode_Default
EXTRN	__imp___localtime64_s:PROC
EXTRN	__imp___time64:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	0a2H
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\labs\êïî\lab1\lab1\diffHours.cpp
;	COMDAT ?diff_hours@@YA_JH_N@Z
_TEXT	SEGMENT
_hour$ = -88						; size = 4
_ltm$ = -76						; size = 36
_now$ = -32						; size = 8
_diffToHours$ = -16					; size = 8
__$ArrayPad$ = -4					; size = 4
_diffInDay$ = 8						; size = 4
_track$ = 12						; size = 1
?diff_hours@@YA_JH_N@Z PROC				; diff_hours, COMDAT

; 4    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0000f	b9 17 00 00 00	 mov	 ecx, 23			; 00000017H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET __15E0FBAC_diffHours@cpp
  0002a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 5    :     long long diffToHours = diffInDay * 24;

  0002f	6b 45 08 18	 imul	 eax, DWORD PTR _diffInDay$[ebp], 24
  00033	99		 cdq
  00034	89 45 f0	 mov	 DWORD PTR _diffToHours$[ebp], eax
  00037	89 55 f4	 mov	 DWORD PTR _diffToHours$[ebp+4], edx

; 6    : 
; 7    :     std::time_t now = std::time(nullptr);

  0003a	6a 00		 push	 0
  0003c	e8 00 00 00 00	 call	 _time
  00041	83 c4 04	 add	 esp, 4
  00044	89 45 e0	 mov	 DWORD PTR _now$[ebp], eax
  00047	89 55 e4	 mov	 DWORD PTR _now$[ebp+4], edx

; 8    : 
; 9    :     std::tm ltm;
; 10   : 
; 11   :     localtime_s(&ltm, &now);

  0004a	8d 45 e0	 lea	 eax, DWORD PTR _now$[ebp]
  0004d	50		 push	 eax
  0004e	8d 4d b4	 lea	 ecx, DWORD PTR _ltm$[ebp]
  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 _localtime_s
  00057	83 c4 08	 add	 esp, 8

; 12   : 
; 13   :     int hour = ltm.tm_hour;

  0005a	8b 45 bc	 mov	 eax, DWORD PTR _ltm$[ebp+8]
  0005d	89 45 a8	 mov	 DWORD PTR _hour$[ebp], eax

; 14   :        
; 15   :     if (track) {

  00060	0f b6 45 0c	 movzx	 eax, BYTE PTR _track$[ebp]
  00064	85 c0		 test	 eax, eax
  00066	74 14		 je	 SHORT $LN2@diff_hours

; 16   :         return diffToHours + hour - 24;

  00068	8b 45 a8	 mov	 eax, DWORD PTR _hour$[ebp]
  0006b	99		 cdq
  0006c	03 45 f0	 add	 eax, DWORD PTR _diffToHours$[ebp]
  0006f	13 55 f4	 adc	 edx, DWORD PTR _diffToHours$[ebp+4]
  00072	83 e8 18	 sub	 eax, 24			; 00000018H
  00075	83 da 00	 sbb	 edx, 0
  00078	eb 14		 jmp	 SHORT $LN1@diff_hours

; 17   :     }

  0007a	eb 12		 jmp	 SHORT $LN1@diff_hours
$LN2@diff_hours:

; 18   :     else {
; 19   :         return diffToHours - hour;

  0007c	8b 45 a8	 mov	 eax, DWORD PTR _hour$[ebp]
  0007f	99		 cdq
  00080	8b 4d f0	 mov	 ecx, DWORD PTR _diffToHours$[ebp]
  00083	2b c8		 sub	 ecx, eax
  00085	8b 75 f4	 mov	 esi, DWORD PTR _diffToHours$[ebp+4]
  00088	1b f2		 sbb	 esi, edx
  0008a	8b c1		 mov	 eax, ecx
  0008c	8b d6		 mov	 edx, esi
$LN1@diff_hours:

; 20   :     }
; 21   : }

  0008e	52		 push	 edx
  0008f	8b cd		 mov	 ecx, ebp
  00091	50		 push	 eax
  00092	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@diff_hours
  00098	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009d	58		 pop	 eax
  0009e	5a		 pop	 edx
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	81 c4 1c 01 00
	00		 add	 esp, 284		; 0000011cH
  000b2	3b ec		 cmp	 ebp, esp
  000b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
  000bd	0f 1f 00	 npad	 3
$LN8@diff_hours:
  000c0	02 00 00 00	 DD	 2
  000c4	00 00 00 00	 DD	 $LN7@diff_hours
$LN7@diff_hours:
  000c8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000cc	08 00 00 00	 DD	 8
  000d0	00 00 00 00	 DD	 $LN5@diff_hours
  000d4	b4 ff ff ff	 DD	 -76			; ffffffb4H
  000d8	24 00 00 00	 DD	 36			; 00000024H
  000dc	00 00 00 00	 DD	 $LN6@diff_hours
$LN6@diff_hours:
  000e0	6c		 DB	 108			; 0000006cH
  000e1	74		 DB	 116			; 00000074H
  000e2	6d		 DB	 109			; 0000006dH
  000e3	00		 DB	 0
$LN5@diff_hours:
  000e4	6e		 DB	 110			; 0000006eH
  000e5	6f		 DB	 111			; 0000006fH
  000e6	77		 DB	 119			; 00000077H
  000e7	00		 DB	 0
?diff_hours@@YA_JH_N@Z ENDP				; diff_hours
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h
;	COMDAT _localtime_s
_TEXT	SEGMENT
__Tm$ = 8						; size = 4
__Time$ = 12						; size = 4
_localtime_s PROC					; COMDAT

; 616  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0A9237D2_time@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 617  :                 return _localtime64_s(_Tm, _Time);

  00021	8b f4		 mov	 esi, esp
  00023	8b 45 0c	 mov	 eax, DWORD PTR __Time$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Tm$[ebp]
  0002a	51		 push	 ecx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  00031	83 c4 08	 add	 esp, 8
  00034	3b f4		 cmp	 esi, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 618  :             }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_localtime_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 551  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0A9237D2_time@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 552  :             return _time64(_Time);

  00021	8b f4		 mov	 esi, esp
  00023	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00026	50		 push	 eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0002d	83 c4 04	 add	 esp, 4
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 553  :         }

  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	5b		 pop	 ebx
  0003a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
END
