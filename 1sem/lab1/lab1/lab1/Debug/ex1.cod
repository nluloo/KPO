; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33134.0 

	TITLE	D:\labs\êïî\project1\lab1\lab1\Debug\ex1.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__5CD2C691_concurrencysal@h DB 01H
__AC907F0D_sal@h DB 01H
__25E6C1AF_vadefs@h DB 01H
__1BAD82EE_vcruntime@h DB 01H
__FF70C7F3_xkeycheck@h DB 01H
__83726EB0_yvals_core@h DB 01H
__E39D81F6_limits@h DB 01H
__6C88BF80_climits DB 01H
__1B0272D9_corecrt@h DB 01H
__1FCB40CB_vcruntime_new@h DB 01H
__D06C1787_vcruntime_new_debug@h DB 01H
__935DC21B_crtdbg@h DB 01H
__5FE44752_crtdefs@h DB 01H
__99FA6215_use_ansi@h DB 01H
__5E272BCD_yvals@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__13F5961F_stddef@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__E8679D72_cstdlib DB 01H
__62F4505C_xtr1common DB 01H
__63E2EDD2_intrin0@inl@h DB 01H
__46C9FE59_intrin0@h DB 01H
__CE2A71BA_cmath DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__4B5D1055_cstdio DB 01H
__61CC25A1_errno@h DB 01H
__DDA1E9D6_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__A4F53592_cstring DB 01H
__EF1F6BBA_corecrt_wconio@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__3D1D430C_corecrt_wdirect@h DB 01H
__8ECB7138_corecrt_share@h DB 01H
__DB7FEBA6_corecrt_wio@h DB 01H
__9A9F0068_corecrt_wprocess@h DB 01H
__369A9BC3_corecrt_wtime@h DB 01H
__CE789B9D_types@h DB 01H
__9901C817_stat@h DB 01H
__3FCAD62E_wchar@h DB 01H
__D1D6C606_cwchar DB 01H
__92164330_iosfwd DB 01H
__4DAC47DF_cstddef DB 01H
__4614B0A2_initializer_list DB 01H
__5DEBAFC9_stdint@h DB 01H
__55397C0F_cstdint DB 01H
__B1D90138_type_traits DB 01H
__DF6A18F9_utility DB 01H
__8FD84684___msvc_iter_core@hpp DB 01H
__3133D734_xutility DB 01H
__209F6074_iterator DB 01H
__F7972D0B_share@h DB 01H
__471AC4AE___msvc_system_error_abi@hpp DB 01H
__D67C64AE_cerrno DB 01H
__FA77ED4C_malloc@h DB 01H
__89766DA4_corecrt_terminate@h DB 01H
__0BD5B7AD_eh@h DB 01H
__D88212D5_vcruntime_exception@h DB 01H
__97BB29C4_exception DB 01H
__D8A9F822___msvc_sanitizer_annotate_container@hpp DB 01H
__B9985323_float@h DB 01H
__3819DBD2_cfloat DB 01H
__5EFF96B6_limits DB 01H
__A524F45B_new DB 01H
__9DB7A512_xatomic@h DB 01H
__B5FF7B3A_xmemory DB 01H
__C12CFDA6_xstring DB 01H
__1EF51399_stdexcept DB 01H
__C0EAB0E0_xcall_once@h DB 01H
__F6B23EC2_xerrc@h DB 01H
__0A9237D2_time@h DB 01H
__0899EDB2_ctime DB 01H
__87F73475_xtimec@h DB 01H
__F8B455A6_xthreads@h DB 01H
__35CACA74_atomic DB 01H
__7FB7A2C0_system_error DB 01H
__9B36A01B_vcruntime_typeinfo@h DB 01H
__41EC242D_typeinfo DB 01H
__E2519A38_memory DB 01H
__CE14CD37_xfacet DB 01H
__AC3744CB___msvc_xlocinfo_types@hpp DB 01H
__1EC467ED_ctype@h DB 01H
__4496F7F2_cctype DB 01H
__791C33B7_locale@h DB 01H
__7BCB41A3_clocale DB 01H
__5E65C7E5_xlocinfo DB 01H
__1E128997_xlocale DB 01H
__6780B0F6_xiosbase DB 01H
__1C55AB25_streambuf DB 01H
__8095EF80_xlocnum DB 01H
__5DE9CE4D_ios DB 01H
__0D025353_ostream DB 01H
__6ED26669_istream DB 01H
__534AAD2B_iostream DB 01H
__0CDF79FB_stdafx@h DB 01H
__CD3280B8_leapYear@h DB 01H
__4A145A59_days@h DB 01H
__CDA7439D_birthday@h DB 01H
__6BEB96EC_ex1@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_02FIDBHGA@ru@				; `string'
PUBLIC	??_C@_0CK@GEGPJIDN@?B?$PL?a?e?p?h?r?e?5?q?o?n?q?n?a?5?b?b?n?d?$OA?61?4?D?D?L?L?C?C?C@ ; `string'
PUBLIC	??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ ; `string'
PUBLIC	??_C@_05GOHMMIIB@fail?$CI@			; `string'
PUBLIC	??_C@_0P@DEBEIPA@?B?b?e?d?h?r?e?5?d?e?m?$PM?3?5@ ; `string'
PUBLIC	??_C@_0BA@OFEBEDGL@?B?b?e?d?h?r?e?5?l?e?q?$PP?v?3?5@ ; `string'
PUBLIC	??_C@_0O@POBGICEA@?B?b?e?d?h?r?e?5?c?n?d?3?5@	; `string'
PUBLIC	??_C@_03LCPHGAHP@cls@				; `string'
PUBLIC	??_C@_04CCHLMOGN@fail@				; `string'
PUBLIC	??_C@_0CA@BIFHHEDL@?5?c?n?d?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?5?c?n?d?n?l?4@ ; `string'
PUBLIC	??_C@_0CD@BCOCLHI@?5?c?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?5?c?n?d@ ; `string'
PUBLIC	??_C@_07IIFCBIAK@?5?c?n?d?s?3?5@		; `string'
PUBLIC	??_C@_0BI@LBHFLDPH@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5@ ; `string'
PUBLIC	??_C@_0BD@OECKIDLN@?5?d?m?e?i?5?d?n?59?5?m?n?$PP?a?p?$PP?4@ ; `string'
PUBLIC	??_C@_09LJIHIGEJ@?N?q?r?$OA?k?n?q?$PM?5@	; `string'
EXTRN	__imp__exit:PROC
EXTRN	__imp__system:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	?leapYear@@YA_NH@Z:PROC				; leapYear
EXTRN	?days@@YAHHHH_N@Z:PROC				; days
EXTRN	?birthday@@YAHHH_N@Z:PROC			; birthday
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_09LJIHIGEJ@?N?q?r?$OA?k?n?q?$PM?5@
CONST	SEGMENT
??_C@_09LJIHIGEJ@?N?q?r?$OA?k?n?q?$PM?5@ DB 0ceH, 0f1H, 0f2H, 0e0H, 0ebH, 0eeH
	DB	0f1H, 0fcH, ' ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OECKIDLN@?5?d?m?e?i?5?d?n?59?5?m?n?$PP?a?p?$PP?4@
CONST	SEGMENT
??_C@_0BD@OECKIDLN@?5?d?m?e?i?5?d?n?59?5?m?n?$PP?a?p?$PP?4@ DB ' ', 0e4H, 0edH
	DB	0e5H, 0e9H, ' ', 0e4H, 0eeH, ' 9 ', 0edH, 0eeH, 0ffH, 0e1H, 0f0H
	DB	0ffH, '.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LBHFLDPH@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5@
CONST	SEGMENT
??_C@_0BI@LBHFLDPH@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5@ DB 0cfH
	DB	0eeH, 0f0H, 0ffH, 0e4H, 0eaH, 0eeH, 0e2H, 0fbH, 0e9H, ' ', 0edH
	DB	0eeH, 0ecH, 0e5H, 0f0H, ' ', 0e4H, 0edH, 0ffH, ' ', 0e2H, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07IIFCBIAK@?5?c?n?d?s?3?5@
CONST	SEGMENT
??_C@_07IIFCBIAK@?5?c?n?d?s?3?5@ DB ' ', 0e3H, 0eeH, 0e4H, 0f3H, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BCOCLHI@?5?c?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?5?c?n?d@
CONST	SEGMENT
??_C@_0CD@BCOCLHI@?5?c?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?5?c?n?d@ DB ' '
	DB	0e3H, 0eeH, 0e4H, ' ', 0edH, 0e5H, ' ', 0ffH, 0e2H, 0ebH, 0ffH
	DB	0e5H, 0f2H, 0f1H, 0ffH, ' ', 0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH
	DB	0f1H, 0edH, 0fbH, 0ecH, ' ', 0e3H, 0eeH, 0e4H, 0eeH, 0ecH, '.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BIFHHEDL@?5?c?n?d?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?5?c?n?d?n?l?4@
CONST	SEGMENT
??_C@_0CA@BIFHHEDL@?5?c?n?d?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?5?c?n?d?n?l?4@ DB ' '
	DB	0e3H, 0eeH, 0e4H, ' ', 0ffH, 0e2H, 0ebH, 0ffH, 0e5H, 0f2H, 0f1H
	DB	0ffH, ' ', 0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH
	DB	0ecH, ' ', 0e3H, 0eeH, 0e4H, 0eeH, 0ecH, '.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CCHLMOGN@fail@
CONST	SEGMENT
??_C@_04CCHLMOGN@fail@ DB 'fail', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LCPHGAHP@cls@
CONST	SEGMENT
??_C@_03LCPHGAHP@cls@ DB 'cls', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POBGICEA@?B?b?e?d?h?r?e?5?c?n?d?3?5@
CONST	SEGMENT
??_C@_0O@POBGICEA@?B?b?e?d?h?r?e?5?c?n?d?3?5@ DB 0c2H, 0e2H, 0e5H, 0e4H, 0e8H
	DB	0f2H, 0e5H, ' ', 0e3H, 0eeH, 0e4H, ': ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OFEBEDGL@?B?b?e?d?h?r?e?5?l?e?q?$PP?v?3?5@
CONST	SEGMENT
??_C@_0BA@OFEBEDGL@?B?b?e?d?h?r?e?5?l?e?q?$PP?v?3?5@ DB 0c2H, 0e2H, 0e5H, 0e4H
	DB	0e8H, 0f2H, 0e5H, ' ', 0ecH, 0e5H, 0f1H, 0ffH, 0f6H, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DEBEIPA@?B?b?e?d?h?r?e?5?d?e?m?$PM?3?5@
CONST	SEGMENT
??_C@_0P@DEBEIPA@?B?b?e?d?h?r?e?5?d?e?m?$PM?3?5@ DB 0c2H, 0e2H, 0e5H, 0e4H
	DB	0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e5H, 0edH, 0fcH, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GOHMMIIB@fail?$CI@
CONST	SEGMENT
??_C@_05GOHMMIIB@fail?$CI@ DB 'fail(', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
CONST	SEGMENT
??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, ': ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GEGPJIDN@?B?$PL?a?e?p?h?r?e?5?q?o?n?q?n?a?5?b?b?n?d?$OA?61?4?D?D?L?L?C?C?C@
CONST	SEGMENT
??_C@_0CK@GEGPJIDN@?B?$PL?a?e?p?h?r?e?5?q?o?n?q?n?a?5?b?b?n?d?$OA?61?4?D?D?L?L?C?C?C@ DB 0c2H
	DB	0fbH, 0e1H, 0e5H, 0f0H, 0e8H, 0f2H, 0e5H, ' ', 0f1H, 0efH, 0eeH
	DB	0f1H, 0eeH, 0e1H, ' ', 0e2H, 0e2H, 0eeH, 0e4H, 0e0H, 0aH, '1.', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0aH, '2.', 0c4H, 0f0H, 0f3H
	DB	0e3H, 0eeH, 0e9H, ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FIDBHGA@ru@
CONST	SEGMENT
??_C@_02FIDBHGA@ru@ DB 'ru', 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	031H
	DW	039bH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	031H
	DW	03faH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	025H
	DW	0b5aH
voltbl	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 128  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	b9 03 00 00 00	 mov	 ecx, 3
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __0D025353_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 129  :             return _Ok;

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]

; 130  :         }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -217						; size = 1
__Zero_uncaught_exceptions$ = -17			; size = 1
_this$ = -8						; size = 4
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 113  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __0D025353_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  : #if !_HAS_EXCEPTIONS
; 115  :             const bool _Zero_uncaught_exceptions = true;
; 116  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0002a	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0002f	0f b6 c0	 movzx	 eax, al
  00032	85 c0		 test	 eax, eax
  00034	75 09		 jne	 SHORT $LN4@sentry
  00036	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  0003d	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0003f	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00046	8a 8d 27 ff ff
	ff		 mov	 cl, BYTE PTR tv72[ebp]
  0004c	88 4d ef	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 118  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 119  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 120  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 121  : 
; 122  :             if (_Zero_uncaught_exceptions) {

  0004f	0f b6 45 ef	 movzx	 eax, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00053	85 c0		 test	 eax, eax
  00055	74 14		 je	 SHORT $LN1@sentry

; 123  :                 this->_Myostr._Osfx();

  00057	8b f4		 mov	 esi, esp
  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 124  :             }
; 125  :         }

  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 96   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0001e	b9 06 00 00 00	 mov	 ecx, 6
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __0D025353_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00049	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 97   :             if (!_Ostr.good()) {

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	75 09		 jne	 SHORT $LN2@sentry

; 98   :                 _Ok = false;

  0007f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 99   :                 return;

  00086	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 100  :             }
; 101  : 
; 102  :             const auto _Tied = _Ostr.tie();

  00088	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00090	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00093	8b f4		 mov	 esi, esp
  00095	8b ca		 mov	 ecx, edx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 103  :             if (!_Tied || _Tied == &_Ostr) {

  000a7	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ab	74 08		 je	 SHORT $LN4@sentry
  000ad	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b0	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b3	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 104  :                 _Ok = true;

  000b5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 105  :                 return;

  000bc	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 106  :             }
; 107  : 
; 108  :             _Tied->flush();

  000be	8b f4		 mov	 esi, esp
  000c0	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 109  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000d8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000db	8b f4		 mov	 esi, esp
  000dd	8b ca		 mov	 ecx, edx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 110  :         }

  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	5f		 pop	 edi
  00108	5e		 pop	 esi
  00109	5b		 pop	 ebx
  0010a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 82   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0001e	b9 07 00 00 00	 mov	 ecx, 7
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	59		 pop	 ecx
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003f	b9 00 00 00 00	 mov	 ecx, OFFSET __0D025353_ostream
  00044	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 83   :             const auto _Rdbuf = _Myostr.rdbuf();

  00049	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004e	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00054	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00062	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00065	8b f4		 mov	 esi, esp
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 84   :             if (_Rdbuf) {

  00077	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007b	74 16		 je	 SHORT $LN3@Sentry_bas

; 85   :                 _Rdbuf->_Unlock();

  0007d	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00080	8b 10		 mov	 edx, DWORD PTR [eax]
  00082	8b f4		 mov	 esi, esp
  00084	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00087	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008a	ff d0		 call	 eax
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 86   :             }
; 87   :         }

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00096	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009d	59		 pop	 ecx
  0009e	5f		 pop	 edi
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
  000b2	cc		 int	 3
  000b3	cc		 int	 3
  000b4	cc		 int	 3
  000b5	cc		 int	 3
  000b6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 75   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	b9 07 00 00 00	 mov	 ecx, 7
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	59		 pop	 ecx
  0001d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __0D025353_ostream
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 76   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  0003d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0004e	8b f4		 mov	 esi, esp
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 77   :             if (_Rdbuf) {

  00060	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00064	74 16		 je	 SHORT $LN1@Sentry_bas

; 78   :                 _Rdbuf->_Lock();

  00066	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00069	8b 10		 mov	 edx, DWORD PTR [eax]
  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00070	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00073	ff d0		 call	 eax
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 79   :             }
; 80   :         }

  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
tv128 = -284						; size = 8
tv308 = -276						; size = 8
tv274 = -272						; size = 4
tv273 = -272						; size = 4
tv65 = -272						; size = 4
$T2 = -264						; size = 4
__Pad$3 = -60						; size = 8
__Ok$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 811  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, char _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  0001e	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET __0D025353_ostream
  00046	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 812  :     // insert a char into char stream
; 813  :     using _Elem = char;
; 814  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 815  : 
; 816  :     ios_base::iostate _State = ios_base::goodbit;

  0004b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 817  :     const typename _Myos::sentry _Ok(_Ostr);

  00052	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00055	50		 push	 eax
  00056	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00059	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 818  : 
; 819  :     if (_Ok) { // state okay, insert

  00065	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00068	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0006d	0f b6 c0	 movzx	 eax, al
  00070	85 c0		 test	 eax, eax
  00072	0f 84 a6 02 00
	00		 je	 $LN8@operator

; 820  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  00078	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00080	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00083	8b f4		 mov	 esi, esp
  00085	8b ca		 mov	 ecx, edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv308[ebp], eax
  0009a	89 95 f0 fe ff
	ff		 mov	 DWORD PTR tv308[ebp+4], edx
  000a0	83 bd f0 fe ff
	ff 00		 cmp	 DWORD PTR tv308[ebp+4], 0
  000a7	7f 18		 jg	 SHORT $LN15@operator
  000a9	7c 09		 jl	 SHORT $LN22@operator
  000ab	83 bd ec fe ff
	ff 01		 cmp	 DWORD PTR tv308[ebp], 1
  000b2	77 0d		 ja	 SHORT $LN15@operator
$LN22@operator:
  000b4	0f 57 c0	 xorps	 xmm0, xmm0
  000b7	66 0f 13 85 e4
	fe ff ff	 movlpd	 QWORD PTR tv128[ebp], xmm0
  000bf	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000c1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c9	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000cc	8b f4		 mov	 esi, esp
  000ce	8b ca		 mov	 ecx, edx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dd	83 e8 01	 sub	 eax, 1
  000e0	83 da 00	 sbb	 edx, 0
  000e3	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv128[ebp], eax
  000e9	89 95 e8 fe ff
	ff		 mov	 DWORD PTR tv128[ebp+4], edx
$LN16@operator:
  000ef	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  000f5	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv128[ebp+4]
  000fb	89 45 c4	 mov	 DWORD PTR __Pad$3[ebp], eax
  000fe	89 4d c8	 mov	 DWORD PTR __Pad$3[ebp+4], ecx

; 821  : 
; 822  :         _TRY_IO_BEGIN

  00101	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 823  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00105	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00108	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0010d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00110	8b f4		 mov	 esi, esp
  00112	8b ca		 mov	 ecx, edx
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0011a	3b f4		 cmp	 esi, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00121	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00126	83 f8 40	 cmp	 eax, 64			; 00000040H
  00129	0f 84 ab 00 00
	00		 je	 $LN10@operator

; 824  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  0012f	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00131	8b 45 c4	 mov	 eax, DWORD PTR __Pad$3[ebp]
  00134	83 e8 01	 sub	 eax, 1
  00137	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$3[ebp+4]
  0013a	83 d9 00	 sbb	 ecx, 0
  0013d	89 45 c4	 mov	 DWORD PTR __Pad$3[ebp], eax
  00140	89 4d c8	 mov	 DWORD PTR __Pad$3[ebp+4], ecx
$LN4@operator:
  00143	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00147	0f 85 8d 00 00
	00		 jne	 $LN10@operator
  0014d	83 7d c8 00	 cmp	 DWORD PTR __Pad$3[ebp+4], 0
  00151	0f 8c 83 00 00
	00		 jl	 $LN10@operator
  00157	7f 06		 jg	 SHORT $LN23@operator
  00159	83 7d c4 00	 cmp	 DWORD PTR __Pad$3[ebp], 0
  0015d	76 7b		 jbe	 SHORT $LN10@operator
$LN23@operator:

; 825  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0015f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00162	8b 08		 mov	 ecx, DWORD PTR [eax]
  00164	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00167	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016a	8b f4		 mov	 esi, esp
  0016c	8b ca		 mov	 ecx, edx
  0016e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00174	3b f4		 cmp	 esi, esp
  00176	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017b	8b f4		 mov	 esi, esp
  0017d	0f b6 c0	 movzx	 eax, al
  00180	50		 push	 eax
  00181	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00184	8b 11		 mov	 edx, DWORD PTR [ecx]
  00186	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00189	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0018c	8b fc		 mov	 edi, esp
  0018e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00194	3b fc		 cmp	 edi, esp
  00196	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019b	8b c8		 mov	 ecx, eax
  0019d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001a3	3b f4		 cmp	 esi, esp
  001a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001aa	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], eax
  001b0	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001c2	83 c4 08	 add	 esp, 8
  001c5	0f b6 c8	 movzx	 ecx, al
  001c8	85 c9		 test	 ecx, ecx
  001ca	74 09		 je	 SHORT $LN11@operator

; 826  :                     _State |= ios_base::badbit;

  001cc	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  001cf	83 c8 04	 or	 eax, 4
  001d2	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN11@operator:

; 827  :                 }
; 828  :             }

  001d5	e9 57 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 829  :         }
; 830  : 
; 831  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  001da	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  001de	75 5b		 jne	 SHORT $LN12@operator
  001e0	8b f4		 mov	 esi, esp
  001e2	0f b6 45 0c	 movzx	 eax, BYTE PTR __Ch$[ebp]
  001e6	50		 push	 eax
  001e7	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001ea	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ec	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001ef	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001f2	8b fc		 mov	 edi, esp
  001f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fa	3b fc		 cmp	 edi, esp
  001fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00201	8b c8		 mov	 ecx, eax
  00203	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00209	3b f4		 cmp	 esi, esp
  0020b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00210	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv273[ebp], eax
  00216	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR tv273[ebp]
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00222	50		 push	 eax
  00223	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00228	83 c4 08	 add	 esp, 8
  0022b	0f b6 c8	 movzx	 ecx, al
  0022e	85 c9		 test	 ecx, ecx
  00230	74 09		 je	 SHORT $LN12@operator

; 832  :             _State |= ios_base::badbit;

  00232	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00235	83 c8 04	 or	 eax, 4
  00238	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN12@operator:

; 833  :         }
; 834  : 
; 835  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  0023b	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  0023d	8b 45 c4	 mov	 eax, DWORD PTR __Pad$3[ebp]
  00240	83 e8 01	 sub	 eax, 1
  00243	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$3[ebp+4]
  00246	83 d9 00	 sbb	 ecx, 0
  00249	89 45 c4	 mov	 DWORD PTR __Pad$3[ebp], eax
  0024c	89 4d c8	 mov	 DWORD PTR __Pad$3[ebp+4], ecx
$LN7@operator:
  0024f	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00253	0f 85 8d 00 00
	00		 jne	 $LN6@operator
  00259	83 7d c8 00	 cmp	 DWORD PTR __Pad$3[ebp+4], 0
  0025d	0f 8c 83 00 00
	00		 jl	 $LN6@operator
  00263	7f 06		 jg	 SHORT $LN24@operator
  00265	83 7d c4 00	 cmp	 DWORD PTR __Pad$3[ebp], 0
  00269	76 7b		 jbe	 SHORT $LN6@operator
$LN24@operator:

; 836  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0026b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0026e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00270	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00273	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00276	8b f4		 mov	 esi, esp
  00278	8b ca		 mov	 ecx, edx
  0027a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00280	3b f4		 cmp	 esi, esp
  00282	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00287	8b f4		 mov	 esi, esp
  00289	0f b6 c0	 movzx	 eax, al
  0028c	50		 push	 eax
  0028d	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00290	8b 11		 mov	 edx, DWORD PTR [ecx]
  00292	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00295	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00298	8b fc		 mov	 edi, esp
  0029a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002a0	3b fc		 cmp	 edi, esp
  002a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a7	8b c8		 mov	 ecx, eax
  002a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  002af	3b f4		 cmp	 esi, esp
  002b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b6	89 85 f0 fe ff
	ff		 mov	 DWORD PTR tv274[ebp], eax
  002bc	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR tv274[ebp]
  002c2	50		 push	 eax
  002c3	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  002c8	50		 push	 eax
  002c9	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002ce	83 c4 08	 add	 esp, 8
  002d1	0f b6 c8	 movzx	 ecx, al
  002d4	85 c9		 test	 ecx, ecx
  002d6	74 09		 je	 SHORT $LN13@operator

; 837  :                 _State |= ios_base::badbit;

  002d8	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002db	83 c8 04	 or	 eax, 4
  002de	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 838  :             }
; 839  :         }

  002e1	e9 57 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  002e6	eb 26		 jmp	 SHORT $LN17@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:

; 840  :         _CATCH_IO_(ios_base, _Ostr)

  002e8	8b f4		 mov	 esi, esp
  002ea	6a 01		 push	 1
  002ec	6a 04		 push	 4
  002ee	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002f1	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f3	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002f6	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002f9	8b ca		 mov	 ecx, edx
  002fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00301	3b f4		 cmp	 esi, esp
  00303	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00308	b8 00 00 00 00	 mov	 eax, $LN21@operator
  0030d	c3		 ret	 0
$LN17@operator:
  0030e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00315	eb 07		 jmp	 SHORT $LN8@operator
$LN21@operator:
  00317	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN8@operator:

; 841  :     }
; 842  : 
; 843  :     _Ostr.width(0);

  0031e	8b f4		 mov	 esi, esp
  00320	6a 00		 push	 0
  00322	6a 00		 push	 0
  00324	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00327	8b 08		 mov	 ecx, DWORD PTR [eax]
  00329	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0032c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0032f	8b ca		 mov	 ecx, edx
  00331	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  00337	3b f4		 cmp	 esi, esp
  00339	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 844  :     _Ostr.setstate(_State);

  0033e	8b f4		 mov	 esi, esp
  00340	6a 00		 push	 0
  00342	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00345	50		 push	 eax
  00346	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00349	8b 11		 mov	 edx, DWORD PTR [ecx]
  0034b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0034e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00351	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00357	3b f4		 cmp	 esi, esp
  00359	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 845  :     return _Ostr;

  0035e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00361	89 85 f8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00367	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0036e	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00371	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00376	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 846  : }

  0037c	52		 push	 edx
  0037d	8b cd		 mov	 ecx, ebp
  0037f	50		 push	 eax
  00380	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@operator
  00386	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0038b	58		 pop	 eax
  0038c	5a		 pop	 edx
  0038d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00390	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00397	59		 pop	 ecx
  00398	5f		 pop	 edi
  00399	5e		 pop	 esi
  0039a	5b		 pop	 ebx
  0039b	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0039e	33 cd		 xor	 ecx, ebp
  003a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a5	81 c4 1c 01 00
	00		 add	 esp, 284		; 0000011cH
  003ab	3b ec		 cmp	 ebp, esp
  003ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b2	8b e5		 mov	 esp, ebp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
  003b6	66 90		 npad	 2
$LN28@operator:
  003b8	01 00 00 00	 DD	 1
  003bc	00 00 00 00	 DD	 $LN27@operator
$LN27@operator:
  003c0	d4 ff ff ff	 DD	 -44			; ffffffd4H
  003c4	08 00 00 00	 DD	 8
  003c8	00 00 00 00	 DD	 $LN25@operator
$LN25@operator:
  003cc	5f		 DB	 95			; 0000005fH
  003cd	4f		 DB	 79			; 0000004fH
  003ce	6b		 DB	 107			; 0000006bH
  003cf	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a e0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-288]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 1010 :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __0D025353_ostream
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1011 :     _Ostr.put(_Ostr.widen('\n'));

  00021	8b f4		 mov	 esi, esp
  00023	6a 0a		 push	 10			; 0000000aH
  00025	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00028	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00030	8b ca		 mov	 ecx, edx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	8b f4		 mov	 esi, esp
  00041	0f b6 c0	 movzx	 eax, al
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1012 :     _Ostr.flush();

  00055	8b f4		 mov	 esi, esp
  00057	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00060	3b f4		 cmp	 esi, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1013 :     return _Ostr;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 1014 : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00073	3b ec		 cmp	 ebp, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -308						; size = 8
tv337 = -300						; size = 8
tv323 = -292						; size = 8
tv284 = -292						; size = 8
tv285 = -288						; size = 4
tv137 = -288						; size = 4
$T2 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 766  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  0001e	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET __0D025353_ostream
  00046	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 767  :     // insert NTBS into char stream
; 768  :     using _Elem = char;
; 769  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 770  : 
; 771  :     ios_base::iostate _State = ios_base::goodbit;

  0004b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 772  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00052	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005b	83 c4 04	 add	 esp, 4
  0005e	33 c9		 xor	 ecx, ecx
  00060	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00063	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 773  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00066	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00069	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0006e	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00071	8b f4		 mov	 esi, esp
  00073	8b ca		 mov	 ecx, edx
  00075	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007b	3b f4		 cmp	 esi, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv323[ebp], eax
  00088	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv323[ebp+4], edx
  0008e	83 bd e0 fe ff
	ff 00		 cmp	 DWORD PTR tv323[ebp+4], 0
  00095	7c 79		 jl	 SHORT $LN17@operator
  00097	7f 09		 jg	 SHORT $LN24@operator
  00099	83 bd dc fe ff
	ff 00		 cmp	 DWORD PTR tv323[ebp], 0
  000a0	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000aa	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000ad	8b f4		 mov	 esi, esp
  000af	8b ca		 mov	 ecx, edx
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	89 85 d4 fe ff
	ff		 mov	 DWORD PTR tv337[ebp], eax
  000c4	89 95 d8 fe ff
	ff		 mov	 DWORD PTR tv337[ebp+4], edx
  000ca	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR tv337[ebp+4]
  000d0	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d3	7c 3b		 jl	 SHORT $LN17@operator
  000d5	7f 0b		 jg	 SHORT $LN25@operator
  000d7	8b 8d d4 fe ff
	ff		 mov	 ecx, DWORD PTR tv337[ebp]
  000dd	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e0	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e2	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e5	8b 02		 mov	 eax, DWORD PTR [edx]
  000e7	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ea	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000ed	8b f4		 mov	 esi, esp
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000ff	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00102	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  00108	89 95 d0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  0010e	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00110	0f 57 c0	 xorps	 xmm0, xmm0
  00113	66 0f 13 85 cc
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011b	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00121	8b 95 d0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00127	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  0012a	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 774  :     const typename _Myos::sentry _Ok(_Ostr);

  0012d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00130	50		 push	 eax
  00131	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00134	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00139	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  :     if (!_Ok) {

  00140	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00143	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00148	0f b6 c0	 movzx	 eax, al
  0014b	85 c0		 test	 eax, eax
  0014d	75 0e		 jne	 SHORT $LN8@operator

; 777  :         _State |= ios_base::badbit;

  0014f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00152	83 c8 04	 or	 eax, 4
  00155	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 778  :     } else { // state okay, insert

  00158	e9 40 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 779  :         _TRY_IO_BEGIN

  0015d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 780  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00161	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00164	8b 08		 mov	 ecx, DWORD PTR [eax]
  00166	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00169	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016c	8b f4		 mov	 esi, esp
  0016e	8b ca		 mov	 ecx, edx
  00170	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00176	3b f4		 cmp	 esi, esp
  00178	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0017d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00182	83 f8 40	 cmp	 eax, 64			; 00000040H
  00185	0f 84 a3 00 00
	00		 je	 $LN11@operator

; 781  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0018b	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0018d	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  00190	83 e8 01	 sub	 eax, 1
  00193	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  00196	83 d9 00	 sbb	 ecx, 0
  00199	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  0019c	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  0019f	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001a3	0f 8c 85 00 00
	00		 jl	 $LN11@operator
  001a9	7f 06		 jg	 SHORT $LN26@operator
  001ab	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001af	76 7d		 jbe	 SHORT $LN11@operator
$LN26@operator:

; 782  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001b1	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b6	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001b9	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001bc	8b f4		 mov	 esi, esp
  001be	8b ca		 mov	 ecx, edx
  001c0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001c6	3b f4		 cmp	 esi, esp
  001c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cd	8b f4		 mov	 esi, esp
  001cf	0f b6 c0	 movzx	 eax, al
  001d2	50		 push	 eax
  001d3	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001d8	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  001db	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001de	8b fc		 mov	 edi, esp
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001e6	3b fc		 cmp	 edi, esp
  001e8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ed	8b c8		 mov	 ecx, eax
  001ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  001f5	3b f4		 cmp	 esi, esp
  001f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fc	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00202	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  00208	50		 push	 eax
  00209	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0020e	50		 push	 eax
  0020f	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00214	83 c4 08	 add	 esp, 8
  00217	0f b6 c8	 movzx	 ecx, al
  0021a	85 c9		 test	 ecx, ecx
  0021c	74 0b		 je	 SHORT $LN12@operator

; 783  :                     _State |= ios_base::badbit; // insertion failed, quit

  0021e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00221	83 c8 04	 or	 eax, 4
  00224	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 784  :                     break;

  00227	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 785  :                 }
; 786  :             }

  00229	e9 5f ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 787  :         }
; 788  : 
; 789  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0022e	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00232	75 64		 jne	 SHORT $LN13@operator
  00234	8b f4		 mov	 esi, esp
  00236	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00239	50		 push	 eax
  0023a	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  0023d	51		 push	 ecx
  0023e	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00241	52		 push	 edx
  00242	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00245	8b 08		 mov	 ecx, DWORD PTR [eax]
  00247	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0024a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0024d	8b fc		 mov	 edi, esp
  0024f	8b ca		 mov	 ecx, edx
  00251	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00257	3b fc		 cmp	 edi, esp
  00259	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025e	8b c8		 mov	 ecx, eax
  00260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00266	3b f4		 cmp	 esi, esp
  00268	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026d	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  00273	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv284[ebp+4], edx
  00279	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR tv284[ebp]
  0027f	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  00282	75 0b		 jne	 SHORT $LN27@operator
  00284	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp+4]
  0028a	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  0028d	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 790  :             _State |= ios_base::badbit;

  0028f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00292	83 c8 04	 or	 eax, 4
  00295	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 791  :         }
; 792  : 
; 793  :         if (_State == ios_base::goodbit) {

  00298	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  0029c	0f 85 a3 00 00
	00		 jne	 $LN14@operator

; 794  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002a2	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a4	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002a7	83 e8 01	 sub	 eax, 1
  002aa	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002ad	83 d9 00	 sbb	 ecx, 0
  002b0	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002b3	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  002b6	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  002ba	0f 8c 85 00 00
	00		 jl	 $LN14@operator
  002c0	7f 06		 jg	 SHORT $LN28@operator
  002c2	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  002c6	76 7d		 jbe	 SHORT $LN14@operator
$LN28@operator:

; 795  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002d3	8b f4		 mov	 esi, esp
  002d5	8b ca		 mov	 ecx, edx
  002d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  002dd	3b f4		 cmp	 esi, esp
  002df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e4	8b f4		 mov	 esi, esp
  002e6	0f b6 c0	 movzx	 eax, al
  002e9	50		 push	 eax
  002ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  002ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ef	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  002f2	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  002f5	8b fc		 mov	 edi, esp
  002f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002fd	3b fc		 cmp	 edi, esp
  002ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00304	8b c8		 mov	 ecx, eax
  00306	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0030c	3b f4		 cmp	 esi, esp
  0030e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00313	89 85 e0 fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00319	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR tv285[ebp]
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00325	50		 push	 eax
  00326	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0032b	83 c4 08	 add	 esp, 8
  0032e	0f b6 c8	 movzx	 ecx, al
  00331	85 c9		 test	 ecx, ecx
  00333	74 0b		 je	 SHORT $LN15@operator

; 796  :                     _State |= ios_base::badbit; // insertion failed, quit

  00335	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00338	83 c8 04	 or	 eax, 4
  0033b	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 797  :                     break;

  0033e	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 798  :                 }
; 799  :             }

  00340	e9 5f ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 800  :         }
; 801  : 
; 802  :         _Ostr.width(0);

  00345	8b f4		 mov	 esi, esp
  00347	6a 00		 push	 0
  00349	6a 00		 push	 0
  0034b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0034e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00350	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00353	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00356	8b ca		 mov	 ecx, edx
  00358	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  0035e	3b f4		 cmp	 esi, esp
  00360	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00365	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  :         _CATCH_IO_(ios_base, _Ostr)

  00367	8b f4		 mov	 esi, esp
  00369	6a 01		 push	 1
  0036b	6a 04		 push	 4
  0036d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00370	8b 08		 mov	 ecx, DWORD PTR [eax]
  00372	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00375	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00378	8b ca		 mov	 ecx, edx
  0037a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00380	3b f4		 cmp	 esi, esp
  00382	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00387	b8 00 00 00 00	 mov	 eax, $LN23@operator
  0038c	c3		 ret	 0
$LN19@operator:
  0038d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00394	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00396	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 804  :     }
; 805  : 
; 806  :     _Ostr.setstate(_State);

  0039d	8b f4		 mov	 esi, esp
  0039f	6a 00		 push	 0
  003a1	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003a4	50		 push	 eax
  003a5	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  003aa	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  003ad	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  003b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003b6	3b f4		 cmp	 esi, esp
  003b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 807  :     return _Ostr;

  003bd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003c0	89 85 e8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003c6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  003cd	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  003d0	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003d5	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 808  : }

  003db	52		 push	 edx
  003dc	8b cd		 mov	 ecx, ebp
  003de	50		 push	 eax
  003df	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  003e5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003ea	58		 pop	 eax
  003eb	5a		 pop	 edx
  003ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  003ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003f6	59		 pop	 ecx
  003f7	5f		 pop	 edi
  003f8	5e		 pop	 esi
  003f9	5b		 pop	 ebx
  003fa	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003fd	33 cd		 xor	 ecx, ebp
  003ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00404	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0040a	3b ec		 cmp	 ebp, esp
  0040c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00411	8b e5		 mov	 esp, ebp
  00413	5d		 pop	 ebp
  00414	c3		 ret	 0
  00415	0f 1f 00	 npad	 3
$LN32@operator:
  00418	01 00 00 00	 DD	 1
  0041c	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  00420	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00424	08 00 00 00	 DD	 8
  00428	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  0042c	5f		 DB	 95			; 0000005fH
  0042d	4f		 DB	 79			; 0000004fH
  0042e	6b		 DB	 107			; 0000006bH
  0042f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a c8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-312]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\labs\êïî\project1\lab1\lab1\ex1.cpp
;	COMDAT _main
_TEXT	SEGMENT
tv612 = -332						; size = 4
tv143 = -332						; size = 4
tv72 = -332						; size = 4
$T1 = -321						; size = 1
$T2 = -309						; size = 1
$T3 = -297						; size = 1
_numberDay$ = -96					; size = 4
_result$ = -81						; size = 1
_s$ = -72						; size = 4
_date$ = -60						; size = 4
_dr$ = -48						; size = 4
_year$ = -36						; size = 4
_month$ = -24						; size = 4
_day$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 8    : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  00012	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	c6 85 bf fe ff
	ff 00		 mov	 BYTE PTR $T1[ebp], 0
  0002f	c6 85 cb fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  00036	c6 85 d7 fe ff
	ff 00		 mov	 BYTE PTR $T3[ebp], 0
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __6BEB96EC_ex1@cpp
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 9    : 	setlocale(LC_ALL, "ru");

  00047	8b f4		 mov	 esi, esp
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_02FIDBHGA@ru@
  0004e	6a 00		 push	 0
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00056	83 c4 08	 add	 esp, 8
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 10   : 	int day, month, year, dr = 0;

  00060	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _dr$[ebp], 0

; 11   : 	int date;
; 12   : 	int s;
; 13   : 
; 14   : 	cout << "Âûáåðèòå ñïîñîá ââîäà\n1.ÄÄÌÌÃÃÃ\n2.Äðóãîé)" << endl;

  00067	8b f4		 mov	 esi, esp
  00069	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@GEGPJIDN@?B?$PL?a?e?p?h?r?e?5?q?o?n?q?n?a?5?b?b?n?d?$OA?61?4?D?D?L?L?C?C?C@
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0007e	83 c4 08	 add	 esp, 8
  00081	8b c8		 mov	 ecx, eax
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00089	3b f4		 cmp	 esi, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 15   : 	cin >> s;

  00090	8b f4		 mov	 esi, esp
  00092	8d 45 b8	 lea	 eax, DWORD PTR _s$[ebp]
  00095	50		 push	 eax
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 16   : 
; 17   : 	switch (s)

  000a9	8b 45 b8	 mov	 eax, DWORD PTR _s$[ebp]
  000ac	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv72[ebp], eax
  000b2	83 bd b4 fe ff
	ff 01		 cmp	 DWORD PTR tv72[ebp], 1
  000b9	74 12		 je	 SHORT $LN6@main
  000bb	83 bd b4 fe ff
	ff 02		 cmp	 DWORD PTR tv72[ebp], 2
  000c2	0f 84 e0 00 00
	00		 je	 $LN9@main
  000c8	e9 74 01 00 00	 jmp	 $LN2@main
$LN6@main:

; 18   : 	{
; 19   : 	case 1:
; 20   : 		cout << "Ââåäèòå äàòó â ôîðìàòå ÄÄÌÌÃÃÃÃ: ";

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GJFPIFCJ@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000dd	83 c4 08	 add	 esp, 8

; 21   : 		cin >> date;

  000e0	8b f4		 mov	 esi, esp
  000e2	8d 45 c4	 lea	 eax, DWORD PTR _date$[ebp]
  000e5	50		 push	 eax
  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  000f2	3b f4		 cmp	 esi, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 22   : 
; 23   : 		if (date < 0 || date > 99999999) {

  000f9	83 7d c4 00	 cmp	 DWORD PTR _date$[ebp], 0
  000fd	7c 09		 jl	 SHORT $LN8@main
  000ff	81 7d c4 ff e0
	f5 05		 cmp	 DWORD PTR _date$[ebp], 99999999 ; 05f5e0ffH
  00106	7e 24		 jle	 SHORT $LN7@main
$LN8@main:

; 24   : 			cout << "fail(";

  00108	68 00 00 00 00	 push	 OFFSET ??_C@_05GOHMMIIB@fail?$CI@
  0010d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00118	83 c4 08	 add	 esp, 8

; 25   : 			exit(EXIT_FAILURE);

  0011b	8b f4		 mov	 esi, esp
  0011d	6a 01		 push	 1
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00125	3b f4		 cmp	 esi, esp
  00127	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@main:

; 26   : 		}
; 27   : 
; 28   : 		day = (date / 10000000) * 10 + (date / 1000000) % 10;

  0012c	8b 45 c4	 mov	 eax, DWORD PTR _date$[ebp]
  0012f	99		 cdq
  00130	b9 80 96 98 00	 mov	 ecx, 10000000		; 00989680H
  00135	f7 f9		 idiv	 ecx
  00137	6b c8 0a	 imul	 ecx, eax, 10
  0013a	8b 45 c4	 mov	 eax, DWORD PTR _date$[ebp]
  0013d	99		 cdq
  0013e	be 40 42 0f 00	 mov	 esi, 1000000		; 000f4240H
  00143	f7 fe		 idiv	 esi
  00145	99		 cdq
  00146	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  0014b	f7 fe		 idiv	 esi
  0014d	03 ca		 add	 ecx, edx
  0014f	c6 85 d7 fe ff
	ff 01		 mov	 BYTE PTR $T3[ebp], 1
  00156	89 4d f4	 mov	 DWORD PTR _day$[ebp], ecx

; 29   : 		month = (date / 100000) % 10 * 10 + (date / 10000) % 10;

  00159	8b 45 c4	 mov	 eax, DWORD PTR _date$[ebp]
  0015c	99		 cdq
  0015d	b9 a0 86 01 00	 mov	 ecx, 100000		; 000186a0H
  00162	f7 f9		 idiv	 ecx
  00164	99		 cdq
  00165	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0016a	f7 f9		 idiv	 ecx
  0016c	6b ca 0a	 imul	 ecx, edx, 10
  0016f	8b 45 c4	 mov	 eax, DWORD PTR _date$[ebp]
  00172	99		 cdq
  00173	be 10 27 00 00	 mov	 esi, 10000		; 00002710H
  00178	f7 fe		 idiv	 esi
  0017a	99		 cdq
  0017b	be 0a 00 00 00	 mov	 esi, 10			; 0000000aH
  00180	f7 fe		 idiv	 esi
  00182	03 ca		 add	 ecx, edx
  00184	c6 85 cb fe ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  0018b	89 4d e8	 mov	 DWORD PTR _month$[ebp], ecx

; 30   : 		year = date % 10000;

  0018e	8b 45 c4	 mov	 eax, DWORD PTR _date$[ebp]
  00191	99		 cdq
  00192	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00197	f7 f9		 idiv	 ecx
  00199	c6 85 bf fe ff
	ff 01		 mov	 BYTE PTR $T1[ebp], 1
  001a0	89 55 dc	 mov	 DWORD PTR _year$[ebp], edx

; 31   : 		break;

  001a3	e9 99 00 00 00	 jmp	 $LN2@main
$LN9@main:

; 32   : 	case 2:
; 33   : 		cout << "Ââåäèòå äåíü: ";

  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DEBEIPA@?B?b?e?d?h?r?e?5?d?e?m?$PM?3?5@
  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001b8	83 c4 08	 add	 esp, 8

; 34   : 		cin >> day;

  001bb	c6 85 d7 fe ff
	ff 01		 mov	 BYTE PTR $T3[ebp], 1
  001c2	8b f4		 mov	 esi, esp
  001c4	8d 45 f4	 lea	 eax, DWORD PTR _day$[ebp]
  001c7	50		 push	 eax
  001c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  001ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  001d4	3b f4		 cmp	 esi, esp
  001d6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   : 		cout << "Ââåäèòå ìåñÿö: ";

  001db	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OFEBEDGL@?B?b?e?d?h?r?e?5?l?e?q?$PP?v?3?5@
  001e0	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001eb	83 c4 08	 add	 esp, 8

; 36   : 		cin >> month;

  001ee	c6 85 cb fe ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
  001f5	8b f4		 mov	 esi, esp
  001f7	8d 45 e8	 lea	 eax, DWORD PTR _month$[ebp]
  001fa	50		 push	 eax
  001fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00201	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  00207	3b f4		 cmp	 esi, esp
  00209	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 37   : 		cout << "Ââåäèòå ãîä: ";

  0020e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@POBGICEA@?B?b?e?d?h?r?e?5?c?n?d?3?5@
  00213	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0021e	83 c4 08	 add	 esp, 8

; 38   : 		cin >> year;

  00221	c6 85 bf fe ff
	ff 01		 mov	 BYTE PTR $T1[ebp], 1
  00228	8b f4		 mov	 esi, esp
  0022a	8d 45 dc	 lea	 eax, DWORD PTR _year$[ebp]
  0022d	50		 push	 eax
  0022e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00234	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  0023a	3b f4		 cmp	 esi, esp
  0023c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@main:

; 39   : 		break;
; 40   : 	default:
; 41   : 		break;
; 42   : 	}
; 43   : 
; 44   : 	bool result = leapYear(year);

  00241	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  00248	75 0d		 jne	 SHORT $LN46@main
  0024a	68 00 00 00 00	 push	 OFFSET $LN47@main
  0024f	e8 00 00 00 00	 call	 __RTC_UninitUse
  00254	83 c4 04	 add	 esp, 4
$LN46@main:
  00257	8b 45 dc	 mov	 eax, DWORD PTR _year$[ebp]
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 ?leapYear@@YA_NH@Z	; leapYear
  00260	83 c4 04	 add	 esp, 4
  00263	88 45 af	 mov	 BYTE PTR _result$[ebp], al

; 45   : 
; 46   : 	switch (month) {

  00266	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  0026d	75 0d		 jne	 SHORT $LN48@main
  0026f	68 00 00 00 00	 push	 OFFSET $LN49@main
  00274	e8 00 00 00 00	 call	 __RTC_UninitUse
  00279	83 c4 04	 add	 esp, 4
$LN48@main:
  0027c	8b 45 e8	 mov	 eax, DWORD PTR _month$[ebp]
  0027f	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv143[ebp], eax
  00285	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv143[ebp]
  0028b	83 e9 01	 sub	 ecx, 1
  0028e	89 8d b4 fe ff
	ff		 mov	 DWORD PTR tv143[ebp], ecx
  00294	83 bd b4 fe ff
	ff 0b		 cmp	 DWORD PTR tv143[ebp], 11 ; 0000000bH
  0029b	0f 87 00 04 00
	00		 ja	 $LN4@main
  002a1	8b 95 b4 fe ff
	ff		 mov	 edx, DWORD PTR tv143[ebp]
  002a7	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN96@main[edx*4]
$LN11@main:

; 47   : 	case 1:
; 48   : 		if (day < 0 || day > 32)

  002ae	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  002b5	75 0d		 jne	 SHORT $LN50@main
  002b7	68 00 00 00 00	 push	 OFFSET $LN51@main
  002bc	e8 00 00 00 00	 call	 __RTC_UninitUse
  002c1	83 c4 04	 add	 esp, 4
$LN50@main:
  002c4	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  002c8	7c 1c		 jl	 SHORT $LN13@main
  002ca	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  002d1	75 0d		 jne	 SHORT $LN52@main
  002d3	68 00 00 00 00	 push	 OFFSET $LN51@main
  002d8	e8 00 00 00 00	 call	 __RTC_UninitUse
  002dd	83 c4 04	 add	 esp, 4
$LN52@main:
  002e0	83 7d f4 20	 cmp	 DWORD PTR _day$[ebp], 32 ; 00000020H
  002e4	7e 11		 jle	 SHORT $LN12@main
$LN13@main:

; 49   : 			exit(EXIT_FAILURE);

  002e6	8b f4		 mov	 esi, esp
  002e8	6a 01		 push	 1
  002ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  002f0	3b f4		 cmp	 esi, esp
  002f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN12@main:

; 50   : 		break;

  002f7	e9 a5 03 00 00	 jmp	 $LN4@main
$LN14@main:

; 51   : 	case 2:
; 52   : 		if(result)

  002fc	0f b6 45 af	 movzx	 eax, BYTE PTR _result$[ebp]
  00300	85 c0		 test	 eax, eax
  00302	74 4b		 je	 SHORT $LN15@main

; 53   : 		{
; 54   : 			if (day < 0 || day > 29)

  00304	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  0030b	75 0d		 jne	 SHORT $LN53@main
  0030d	68 00 00 00 00	 push	 OFFSET $LN51@main
  00312	e8 00 00 00 00	 call	 __RTC_UninitUse
  00317	83 c4 04	 add	 esp, 4
$LN53@main:
  0031a	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  0031e	7c 1c		 jl	 SHORT $LN18@main
  00320	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00327	75 0d		 jne	 SHORT $LN54@main
  00329	68 00 00 00 00	 push	 OFFSET $LN51@main
  0032e	e8 00 00 00 00	 call	 __RTC_UninitUse
  00333	83 c4 04	 add	 esp, 4
$LN54@main:
  00336	83 7d f4 1d	 cmp	 DWORD PTR _day$[ebp], 29 ; 0000001dH
  0033a	7e 11		 jle	 SHORT $LN17@main
$LN18@main:

; 55   : 				exit(EXIT_FAILURE);

  0033c	8b f4		 mov	 esi, esp
  0033e	6a 01		 push	 1
  00340	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00346	3b f4		 cmp	 esi, esp
  00348	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN17@main:

; 56   : 		}

  0034d	eb 49		 jmp	 SHORT $LN16@main
$LN15@main:

; 57   : 		else {
; 58   : 			if (day < 0 || day > 28)

  0034f	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00356	75 0d		 jne	 SHORT $LN55@main
  00358	68 00 00 00 00	 push	 OFFSET $LN51@main
  0035d	e8 00 00 00 00	 call	 __RTC_UninitUse
  00362	83 c4 04	 add	 esp, 4
$LN55@main:
  00365	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  00369	7c 1c		 jl	 SHORT $LN20@main
  0036b	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00372	75 0d		 jne	 SHORT $LN56@main
  00374	68 00 00 00 00	 push	 OFFSET $LN51@main
  00379	e8 00 00 00 00	 call	 __RTC_UninitUse
  0037e	83 c4 04	 add	 esp, 4
$LN56@main:
  00381	83 7d f4 1c	 cmp	 DWORD PTR _day$[ebp], 28 ; 0000001cH
  00385	7e 11		 jle	 SHORT $LN16@main
$LN20@main:

; 59   : 				exit(EXIT_FAILURE);

  00387	8b f4		 mov	 esi, esp
  00389	6a 01		 push	 1
  0038b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00391	3b f4		 cmp	 esi, esp
  00393	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN16@main:

; 60   : 		}
; 61   : 		break;

  00398	e9 04 03 00 00	 jmp	 $LN4@main
$LN21@main:

; 62   : 	case 3:
; 63   : 		if (day < 0 && day > 32)

  0039d	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  003a4	75 0d		 jne	 SHORT $LN57@main
  003a6	68 00 00 00 00	 push	 OFFSET $LN51@main
  003ab	e8 00 00 00 00	 call	 __RTC_UninitUse
  003b0	83 c4 04	 add	 esp, 4
$LN57@main:
  003b3	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  003b7	7d 2d		 jge	 SHORT $LN22@main
  003b9	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  003c0	75 0d		 jne	 SHORT $LN58@main
  003c2	68 00 00 00 00	 push	 OFFSET $LN51@main
  003c7	e8 00 00 00 00	 call	 __RTC_UninitUse
  003cc	83 c4 04	 add	 esp, 4
$LN58@main:
  003cf	83 7d f4 20	 cmp	 DWORD PTR _day$[ebp], 32 ; 00000020H
  003d3	7e 11		 jle	 SHORT $LN22@main

; 64   : 			exit(EXIT_FAILURE);

  003d5	8b f4		 mov	 esi, esp
  003d7	6a 01		 push	 1
  003d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  003df	3b f4		 cmp	 esi, esp
  003e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN22@main:

; 65   : 		break;

  003e6	e9 b6 02 00 00	 jmp	 $LN4@main
$LN23@main:

; 66   : 	case 4:
; 67   : 		if (day < 0 && day > 31)

  003eb	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  003f2	75 0d		 jne	 SHORT $LN59@main
  003f4	68 00 00 00 00	 push	 OFFSET $LN51@main
  003f9	e8 00 00 00 00	 call	 __RTC_UninitUse
  003fe	83 c4 04	 add	 esp, 4
$LN59@main:
  00401	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  00405	7d 2d		 jge	 SHORT $LN24@main
  00407	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  0040e	75 0d		 jne	 SHORT $LN60@main
  00410	68 00 00 00 00	 push	 OFFSET $LN51@main
  00415	e8 00 00 00 00	 call	 __RTC_UninitUse
  0041a	83 c4 04	 add	 esp, 4
$LN60@main:
  0041d	83 7d f4 1f	 cmp	 DWORD PTR _day$[ebp], 31 ; 0000001fH
  00421	7e 11		 jle	 SHORT $LN24@main

; 68   : 			exit(EXIT_FAILURE);

  00423	8b f4		 mov	 esi, esp
  00425	6a 01		 push	 1
  00427	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  0042d	3b f4		 cmp	 esi, esp
  0042f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN24@main:

; 69   : 		break;

  00434	e9 68 02 00 00	 jmp	 $LN4@main
$LN25@main:

; 70   : 	case 5:
; 71   : 		if (day < 0 && day > 32)

  00439	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00440	75 0d		 jne	 SHORT $LN61@main
  00442	68 00 00 00 00	 push	 OFFSET $LN51@main
  00447	e8 00 00 00 00	 call	 __RTC_UninitUse
  0044c	83 c4 04	 add	 esp, 4
$LN61@main:
  0044f	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  00453	7d 2d		 jge	 SHORT $LN26@main
  00455	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  0045c	75 0d		 jne	 SHORT $LN62@main
  0045e	68 00 00 00 00	 push	 OFFSET $LN51@main
  00463	e8 00 00 00 00	 call	 __RTC_UninitUse
  00468	83 c4 04	 add	 esp, 4
$LN62@main:
  0046b	83 7d f4 20	 cmp	 DWORD PTR _day$[ebp], 32 ; 00000020H
  0046f	7e 11		 jle	 SHORT $LN26@main

; 72   : 			exit(EXIT_FAILURE);

  00471	8b f4		 mov	 esi, esp
  00473	6a 01		 push	 1
  00475	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  0047b	3b f4		 cmp	 esi, esp
  0047d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN26@main:

; 73   : 		break;

  00482	e9 1a 02 00 00	 jmp	 $LN4@main
$LN27@main:

; 74   : 	case 6:
; 75   : 		if (day < 0 && day > 31)

  00487	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  0048e	75 0d		 jne	 SHORT $LN63@main
  00490	68 00 00 00 00	 push	 OFFSET $LN51@main
  00495	e8 00 00 00 00	 call	 __RTC_UninitUse
  0049a	83 c4 04	 add	 esp, 4
$LN63@main:
  0049d	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  004a1	7d 2d		 jge	 SHORT $LN28@main
  004a3	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  004aa	75 0d		 jne	 SHORT $LN64@main
  004ac	68 00 00 00 00	 push	 OFFSET $LN51@main
  004b1	e8 00 00 00 00	 call	 __RTC_UninitUse
  004b6	83 c4 04	 add	 esp, 4
$LN64@main:
  004b9	83 7d f4 1f	 cmp	 DWORD PTR _day$[ebp], 31 ; 0000001fH
  004bd	7e 11		 jle	 SHORT $LN28@main

; 76   : 			exit(EXIT_FAILURE);

  004bf	8b f4		 mov	 esi, esp
  004c1	6a 01		 push	 1
  004c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  004c9	3b f4		 cmp	 esi, esp
  004cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN28@main:

; 77   : 		break;

  004d0	e9 cc 01 00 00	 jmp	 $LN4@main
$LN29@main:

; 78   : 	case 7:
; 79   : 		if (day < 0 && day > 32)

  004d5	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  004dc	75 0d		 jne	 SHORT $LN65@main
  004de	68 00 00 00 00	 push	 OFFSET $LN51@main
  004e3	e8 00 00 00 00	 call	 __RTC_UninitUse
  004e8	83 c4 04	 add	 esp, 4
$LN65@main:
  004eb	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  004ef	7d 2d		 jge	 SHORT $LN30@main
  004f1	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  004f8	75 0d		 jne	 SHORT $LN66@main
  004fa	68 00 00 00 00	 push	 OFFSET $LN51@main
  004ff	e8 00 00 00 00	 call	 __RTC_UninitUse
  00504	83 c4 04	 add	 esp, 4
$LN66@main:
  00507	83 7d f4 20	 cmp	 DWORD PTR _day$[ebp], 32 ; 00000020H
  0050b	7e 11		 jle	 SHORT $LN30@main

; 80   : 			exit(EXIT_FAILURE);

  0050d	8b f4		 mov	 esi, esp
  0050f	6a 01		 push	 1
  00511	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00517	3b f4		 cmp	 esi, esp
  00519	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN30@main:

; 81   : 		break;

  0051e	e9 7e 01 00 00	 jmp	 $LN4@main
$LN31@main:

; 82   : 	case 8:
; 83   : 		if (day < 0 && day > 31)

  00523	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  0052a	75 0d		 jne	 SHORT $LN67@main
  0052c	68 00 00 00 00	 push	 OFFSET $LN51@main
  00531	e8 00 00 00 00	 call	 __RTC_UninitUse
  00536	83 c4 04	 add	 esp, 4
$LN67@main:
  00539	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  0053d	7d 2d		 jge	 SHORT $LN32@main
  0053f	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00546	75 0d		 jne	 SHORT $LN68@main
  00548	68 00 00 00 00	 push	 OFFSET $LN51@main
  0054d	e8 00 00 00 00	 call	 __RTC_UninitUse
  00552	83 c4 04	 add	 esp, 4
$LN68@main:
  00555	83 7d f4 1f	 cmp	 DWORD PTR _day$[ebp], 31 ; 0000001fH
  00559	7e 11		 jle	 SHORT $LN32@main

; 84   : 			exit(EXIT_FAILURE);

  0055b	8b f4		 mov	 esi, esp
  0055d	6a 01		 push	 1
  0055f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00565	3b f4		 cmp	 esi, esp
  00567	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN32@main:

; 85   : 		break;

  0056c	e9 30 01 00 00	 jmp	 $LN4@main
$LN33@main:

; 86   : 	case 9:
; 87   : 		if (day < 0 && day > 32)

  00571	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00578	75 0d		 jne	 SHORT $LN69@main
  0057a	68 00 00 00 00	 push	 OFFSET $LN51@main
  0057f	e8 00 00 00 00	 call	 __RTC_UninitUse
  00584	83 c4 04	 add	 esp, 4
$LN69@main:
  00587	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  0058b	7d 2d		 jge	 SHORT $LN34@main
  0058d	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00594	75 0d		 jne	 SHORT $LN70@main
  00596	68 00 00 00 00	 push	 OFFSET $LN51@main
  0059b	e8 00 00 00 00	 call	 __RTC_UninitUse
  005a0	83 c4 04	 add	 esp, 4
$LN70@main:
  005a3	83 7d f4 20	 cmp	 DWORD PTR _day$[ebp], 32 ; 00000020H
  005a7	7e 11		 jle	 SHORT $LN34@main

; 88   : 			exit(EXIT_FAILURE);

  005a9	8b f4		 mov	 esi, esp
  005ab	6a 01		 push	 1
  005ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  005b3	3b f4		 cmp	 esi, esp
  005b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN34@main:

; 89   : 		break;

  005ba	e9 e2 00 00 00	 jmp	 $LN4@main
$LN35@main:

; 90   : 	case 10:
; 91   : 		if (day < 0 && day > 32)

  005bf	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  005c6	75 0d		 jne	 SHORT $LN71@main
  005c8	68 00 00 00 00	 push	 OFFSET $LN51@main
  005cd	e8 00 00 00 00	 call	 __RTC_UninitUse
  005d2	83 c4 04	 add	 esp, 4
$LN71@main:
  005d5	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  005d9	7d 2d		 jge	 SHORT $LN36@main
  005db	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  005e2	75 0d		 jne	 SHORT $LN72@main
  005e4	68 00 00 00 00	 push	 OFFSET $LN51@main
  005e9	e8 00 00 00 00	 call	 __RTC_UninitUse
  005ee	83 c4 04	 add	 esp, 4
$LN72@main:
  005f1	83 7d f4 20	 cmp	 DWORD PTR _day$[ebp], 32 ; 00000020H
  005f5	7e 11		 jle	 SHORT $LN36@main

; 92   : 			exit(EXIT_FAILURE);

  005f7	8b f4		 mov	 esi, esp
  005f9	6a 01		 push	 1
  005fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00601	3b f4		 cmp	 esi, esp
  00603	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN36@main:

; 93   : 		break;

  00608	e9 94 00 00 00	 jmp	 $LN4@main
$LN37@main:

; 94   : 	case 11:
; 95   : 		if (day < 0 && day > 31)

  0060d	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00614	75 0d		 jne	 SHORT $LN73@main
  00616	68 00 00 00 00	 push	 OFFSET $LN51@main
  0061b	e8 00 00 00 00	 call	 __RTC_UninitUse
  00620	83 c4 04	 add	 esp, 4
$LN73@main:
  00623	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  00627	7d 2d		 jge	 SHORT $LN38@main
  00629	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00630	75 0d		 jne	 SHORT $LN74@main
  00632	68 00 00 00 00	 push	 OFFSET $LN51@main
  00637	e8 00 00 00 00	 call	 __RTC_UninitUse
  0063c	83 c4 04	 add	 esp, 4
$LN74@main:
  0063f	83 7d f4 1f	 cmp	 DWORD PTR _day$[ebp], 31 ; 0000001fH
  00643	7e 11		 jle	 SHORT $LN38@main

; 96   : 			exit(EXIT_FAILURE);

  00645	8b f4		 mov	 esi, esp
  00647	6a 01		 push	 1
  00649	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  0064f	3b f4		 cmp	 esi, esp
  00651	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN38@main:

; 97   : 		break;

  00656	eb 49		 jmp	 SHORT $LN4@main
$LN39@main:

; 98   : 	case 12:
; 99   : 		if (day < 0 && day > 32)

  00658	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  0065f	75 0d		 jne	 SHORT $LN75@main
  00661	68 00 00 00 00	 push	 OFFSET $LN51@main
  00666	e8 00 00 00 00	 call	 __RTC_UninitUse
  0066b	83 c4 04	 add	 esp, 4
$LN75@main:
  0066e	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  00672	7d 2d		 jge	 SHORT $LN4@main
  00674	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  0067b	75 0d		 jne	 SHORT $LN76@main
  0067d	68 00 00 00 00	 push	 OFFSET $LN51@main
  00682	e8 00 00 00 00	 call	 __RTC_UninitUse
  00687	83 c4 04	 add	 esp, 4
$LN76@main:
  0068a	83 7d f4 20	 cmp	 DWORD PTR _day$[ebp], 32 ; 00000020H
  0068e	7e 11		 jle	 SHORT $LN4@main

; 100  : 			exit(EXIT_FAILURE);

  00690	8b f4		 mov	 esi, esp
  00692	6a 01		 push	 1
  00694	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  0069a	3b f4		 cmp	 esi, esp
  0069c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@main:

; 101  : 		break;
; 102  : 	};
; 103  : 
; 104  : 	system("cls");

  006a1	8b f4		 mov	 esi, esp
  006a3	68 00 00 00 00	 push	 OFFSET ??_C@_03LCPHGAHP@cls@
  006a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  006ae	83 c4 04	 add	 esp, 4
  006b1	3b f4		 cmp	 esi, esp
  006b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  : 	cout << day / 10 << day % 10 << '.';

  006b8	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  006bf	75 0d		 jne	 SHORT $LN77@main
  006c1	68 00 00 00 00	 push	 OFFSET $LN51@main
  006c6	e8 00 00 00 00	 call	 __RTC_UninitUse
  006cb	83 c4 04	 add	 esp, 4
$LN77@main:
  006ce	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  006d5	75 0d		 jne	 SHORT $LN78@main
  006d7	68 00 00 00 00	 push	 OFFSET $LN51@main
  006dc	e8 00 00 00 00	 call	 __RTC_UninitUse
  006e1	83 c4 04	 add	 esp, 4
$LN78@main:
  006e4	6a 2e		 push	 46			; 0000002eH
  006e6	8b 45 f4	 mov	 eax, DWORD PTR _day$[ebp]
  006e9	99		 cdq
  006ea	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  006ef	f7 f9		 idiv	 ecx
  006f1	8b f4		 mov	 esi, esp
  006f3	52		 push	 edx
  006f4	8b 45 f4	 mov	 eax, DWORD PTR _day$[ebp]
  006f7	99		 cdq
  006f8	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  006fd	f7 f9		 idiv	 ecx
  006ff	8b fc		 mov	 edi, esp
  00701	50		 push	 eax
  00702	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00708	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0070e	3b fc		 cmp	 edi, esp
  00710	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00715	8b c8		 mov	 ecx, eax
  00717	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0071d	3b f4		 cmp	 esi, esp
  0071f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00724	50		 push	 eax
  00725	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0072a	83 c4 08	 add	 esp, 8

; 106  : 	cout << month / 10 << month % 10 << '.';

  0072d	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  00734	75 0d		 jne	 SHORT $LN79@main
  00736	68 00 00 00 00	 push	 OFFSET $LN49@main
  0073b	e8 00 00 00 00	 call	 __RTC_UninitUse
  00740	83 c4 04	 add	 esp, 4
$LN79@main:
  00743	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  0074a	75 0d		 jne	 SHORT $LN80@main
  0074c	68 00 00 00 00	 push	 OFFSET $LN49@main
  00751	e8 00 00 00 00	 call	 __RTC_UninitUse
  00756	83 c4 04	 add	 esp, 4
$LN80@main:
  00759	6a 2e		 push	 46			; 0000002eH
  0075b	8b 45 e8	 mov	 eax, DWORD PTR _month$[ebp]
  0075e	99		 cdq
  0075f	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00764	f7 f9		 idiv	 ecx
  00766	8b f4		 mov	 esi, esp
  00768	52		 push	 edx
  00769	8b 45 e8	 mov	 eax, DWORD PTR _month$[ebp]
  0076c	99		 cdq
  0076d	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00772	f7 f9		 idiv	 ecx
  00774	8b fc		 mov	 edi, esp
  00776	50		 push	 eax
  00777	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0077d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00783	3b fc		 cmp	 edi, esp
  00785	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0078a	8b c8		 mov	 ecx, eax
  0078c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00792	3b f4		 cmp	 esi, esp
  00794	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00799	50		 push	 eax
  0079a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0079f	83 c4 08	 add	 esp, 8

; 107  : 	cout << year / 1000 << (year / 100) % 10 << year / 10 % 10 << year % 10 << '\n';

  007a2	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  007a9	75 0d		 jne	 SHORT $LN81@main
  007ab	68 00 00 00 00	 push	 OFFSET $LN47@main
  007b0	e8 00 00 00 00	 call	 __RTC_UninitUse
  007b5	83 c4 04	 add	 esp, 4
$LN81@main:
  007b8	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  007bf	75 0d		 jne	 SHORT $LN82@main
  007c1	68 00 00 00 00	 push	 OFFSET $LN47@main
  007c6	e8 00 00 00 00	 call	 __RTC_UninitUse
  007cb	83 c4 04	 add	 esp, 4
$LN82@main:
  007ce	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  007d5	75 0d		 jne	 SHORT $LN83@main
  007d7	68 00 00 00 00	 push	 OFFSET $LN47@main
  007dc	e8 00 00 00 00	 call	 __RTC_UninitUse
  007e1	83 c4 04	 add	 esp, 4
$LN83@main:
  007e4	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  007eb	75 0d		 jne	 SHORT $LN84@main
  007ed	68 00 00 00 00	 push	 OFFSET $LN47@main
  007f2	e8 00 00 00 00	 call	 __RTC_UninitUse
  007f7	83 c4 04	 add	 esp, 4
$LN84@main:
  007fa	6a 0a		 push	 10			; 0000000aH
  007fc	8b 45 dc	 mov	 eax, DWORD PTR _year$[ebp]
  007ff	99		 cdq
  00800	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00805	f7 f9		 idiv	 ecx
  00807	8b f4		 mov	 esi, esp
  00809	52		 push	 edx
  0080a	8b 45 dc	 mov	 eax, DWORD PTR _year$[ebp]
  0080d	99		 cdq
  0080e	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00813	f7 f9		 idiv	 ecx
  00815	99		 cdq
  00816	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0081b	f7 f9		 idiv	 ecx
  0081d	8b fc		 mov	 edi, esp
  0081f	52		 push	 edx
  00820	8b 45 dc	 mov	 eax, DWORD PTR _year$[ebp]
  00823	99		 cdq
  00824	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00829	f7 f9		 idiv	 ecx
  0082b	99		 cdq
  0082c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00831	f7 f9		 idiv	 ecx
  00833	8b dc		 mov	 ebx, esp
  00835	52		 push	 edx
  00836	8b 45 dc	 mov	 eax, DWORD PTR _year$[ebp]
  00839	99		 cdq
  0083a	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0083f	f7 f9		 idiv	 ecx
  00841	8b cc		 mov	 ecx, esp
  00843	50		 push	 eax
  00844	89 8d b4 fe ff
	ff		 mov	 DWORD PTR tv612[ebp], ecx
  0084a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00850	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00856	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv612[ebp]
  0085c	3b cc		 cmp	 ecx, esp
  0085e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00863	8b c8		 mov	 ecx, eax
  00865	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0086b	3b dc		 cmp	 ebx, esp
  0086d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00872	8b c8		 mov	 ecx, eax
  00874	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0087a	3b fc		 cmp	 edi, esp
  0087c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00881	8b c8		 mov	 ecx, eax
  00883	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00889	3b f4		 cmp	 esi, esp
  0088b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00890	50		 push	 eax
  00891	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00896	83 c4 08	 add	 esp, 8

; 108  : 
; 109  : 	if (day <= 0 || day > 31 || month <= 0 || month > 12 || year < 0) {

  00899	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  008a0	75 0d		 jne	 SHORT $LN85@main
  008a2	68 00 00 00 00	 push	 OFFSET $LN51@main
  008a7	e8 00 00 00 00	 call	 __RTC_UninitUse
  008ac	83 c4 04	 add	 esp, 4
$LN85@main:
  008af	83 7d f4 00	 cmp	 DWORD PTR _day$[ebp], 0
  008b3	7e 70		 jle	 SHORT $LN42@main
  008b5	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  008bc	75 0d		 jne	 SHORT $LN86@main
  008be	68 00 00 00 00	 push	 OFFSET $LN51@main
  008c3	e8 00 00 00 00	 call	 __RTC_UninitUse
  008c8	83 c4 04	 add	 esp, 4
$LN86@main:
  008cb	83 7d f4 1f	 cmp	 DWORD PTR _day$[ebp], 31 ; 0000001fH
  008cf	7f 54		 jg	 SHORT $LN42@main
  008d1	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  008d8	75 0d		 jne	 SHORT $LN87@main
  008da	68 00 00 00 00	 push	 OFFSET $LN49@main
  008df	e8 00 00 00 00	 call	 __RTC_UninitUse
  008e4	83 c4 04	 add	 esp, 4
$LN87@main:
  008e7	83 7d e8 00	 cmp	 DWORD PTR _month$[ebp], 0
  008eb	7e 38		 jle	 SHORT $LN42@main
  008ed	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  008f4	75 0d		 jne	 SHORT $LN88@main
  008f6	68 00 00 00 00	 push	 OFFSET $LN49@main
  008fb	e8 00 00 00 00	 call	 __RTC_UninitUse
  00900	83 c4 04	 add	 esp, 4
$LN88@main:
  00903	83 7d e8 0c	 cmp	 DWORD PTR _month$[ebp], 12 ; 0000000cH
  00907	7f 1c		 jg	 SHORT $LN42@main
  00909	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  00910	75 0d		 jne	 SHORT $LN89@main
  00912	68 00 00 00 00	 push	 OFFSET $LN47@main
  00917	e8 00 00 00 00	 call	 __RTC_UninitUse
  0091c	83 c4 04	 add	 esp, 4
$LN89@main:
  0091f	83 7d dc 00	 cmp	 DWORD PTR _year$[ebp], 0
  00923	7d 3b		 jge	 SHORT $LN41@main
$LN42@main:

; 110  : 		system("cls");

  00925	8b f4		 mov	 esi, esp
  00927	68 00 00 00 00	 push	 OFFSET ??_C@_03LCPHGAHP@cls@
  0092c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  00932	83 c4 04	 add	 esp, 4
  00935	3b f4		 cmp	 esi, esp
  00937	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 111  : 		cout << "fail";

  0093c	68 00 00 00 00	 push	 OFFSET ??_C@_04CCHLMOGN@fail@
  00941	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00946	50		 push	 eax
  00947	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0094c	83 c4 08	 add	 esp, 8

; 112  : 		exit(EXIT_FAILURE);

  0094f	8b f4		 mov	 esi, esp
  00951	6a 01		 push	 1
  00953	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__exit
  00959	3b f4		 cmp	 esi, esp
  0095b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN41@main:

; 113  : 	}
; 114  : 
; 115  : 
; 116  : 	if(result)

  00960	0f b6 45 af	 movzx	 eax, BYTE PTR _result$[ebp]
  00964	85 c0		 test	 eax, eax
  00966	74 55		 je	 SHORT $LN43@main

; 117  : 		std::cout << year << " ãîä ÿâëÿåòñÿ âèñîêîñíûì ãîäîì." << std::endl;

  00968	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  0096f	75 0d		 jne	 SHORT $LN90@main
  00971	68 00 00 00 00	 push	 OFFSET $LN47@main
  00976	e8 00 00 00 00	 call	 __RTC_UninitUse
  0097b	83 c4 04	 add	 esp, 4
$LN90@main:
  0097e	8b f4		 mov	 esi, esp
  00980	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00985	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BIFHHEDL@?5?c?n?d?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?5?c?n?d?n?l?4@
  0098a	8b fc		 mov	 edi, esp
  0098c	8b 45 dc	 mov	 eax, DWORD PTR _year$[ebp]
  0098f	50		 push	 eax
  00990	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00996	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0099c	3b fc		 cmp	 edi, esp
  0099e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009a3	50		 push	 eax
  009a4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  009a9	83 c4 08	 add	 esp, 8
  009ac	8b c8		 mov	 ecx, eax
  009ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  009b4	3b f4		 cmp	 esi, esp
  009b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009bb	eb 53		 jmp	 SHORT $LN44@main
$LN43@main:

; 118  : 	else
; 119  : 		std::cout << year << " ãîä íå ÿâëÿåòñÿ âèñîêîñíûì ãîäîì." << std::endl;

  009bd	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  009c4	75 0d		 jne	 SHORT $LN91@main
  009c6	68 00 00 00 00	 push	 OFFSET $LN47@main
  009cb	e8 00 00 00 00	 call	 __RTC_UninitUse
  009d0	83 c4 04	 add	 esp, 4
$LN91@main:
  009d3	8b f4		 mov	 esi, esp
  009d5	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  009da	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@BCOCLHI@?5?c?n?d?5?m?e?5?$PP?b?k?$PP?e?r?q?$PP?5?b?h?q?n?j?n?q?m?$PL?l?5?c?n?d@
  009df	8b fc		 mov	 edi, esp
  009e1	8b 45 dc	 mov	 eax, DWORD PTR _year$[ebp]
  009e4	50		 push	 eax
  009e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  009eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  009f1	3b fc		 cmp	 edi, esp
  009f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009f8	50		 push	 eax
  009f9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  009fe	83 c4 08	 add	 esp, 8
  00a01	8b c8		 mov	 ecx, eax
  00a03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00a09	3b f4		 cmp	 esi, esp
  00a0b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN44@main:

; 120  : 
; 121  : 	int numberDay = days(day, month, dr, result);

  00a10	80 bd cb fe ff
	ff 00		 cmp	 BYTE PTR $T2[ebp], 0
  00a17	75 0d		 jne	 SHORT $LN92@main
  00a19	68 00 00 00 00	 push	 OFFSET $LN49@main
  00a1e	e8 00 00 00 00	 call	 __RTC_UninitUse
  00a23	83 c4 04	 add	 esp, 4
$LN92@main:
  00a26	80 bd d7 fe ff
	ff 00		 cmp	 BYTE PTR $T3[ebp], 0
  00a2d	75 0d		 jne	 SHORT $LN93@main
  00a2f	68 00 00 00 00	 push	 OFFSET $LN51@main
  00a34	e8 00 00 00 00	 call	 __RTC_UninitUse
  00a39	83 c4 04	 add	 esp, 4
$LN93@main:
  00a3c	0f b6 45 af	 movzx	 eax, BYTE PTR _result$[ebp]
  00a40	50		 push	 eax
  00a41	8b 4d d0	 mov	 ecx, DWORD PTR _dr$[ebp]
  00a44	51		 push	 ecx
  00a45	8b 55 e8	 mov	 edx, DWORD PTR _month$[ebp]
  00a48	52		 push	 edx
  00a49	8b 45 f4	 mov	 eax, DWORD PTR _day$[ebp]
  00a4c	50		 push	 eax
  00a4d	e8 00 00 00 00	 call	 ?days@@YAHHHH_N@Z	; days
  00a52	83 c4 10	 add	 esp, 16			; 00000010H
  00a55	89 45 a0	 mov	 DWORD PTR _numberDay$[ebp], eax

; 122  : 	cout << "Ïîðÿäêîâûé íîìåð äíÿ â " << year << " ãîäó: " << numberDay << endl;

  00a58	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  00a5f	75 0d		 jne	 SHORT $LN94@main
  00a61	68 00 00 00 00	 push	 OFFSET $LN47@main
  00a66	e8 00 00 00 00	 call	 __RTC_UninitUse
  00a6b	83 c4 04	 add	 esp, 4
$LN94@main:
  00a6e	8b f4		 mov	 esi, esp
  00a70	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00a75	8b fc		 mov	 edi, esp
  00a77	8b 45 a0	 mov	 eax, DWORD PTR _numberDay$[ebp]
  00a7a	50		 push	 eax
  00a7b	68 00 00 00 00	 push	 OFFSET ??_C@_07IIFCBIAK@?5?c?n?d?s?3?5@
  00a80	8b dc		 mov	 ebx, esp
  00a82	8b 4d dc	 mov	 ecx, DWORD PTR _year$[ebp]
  00a85	51		 push	 ecx
  00a86	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LBHFLDPH@?O?n?p?$PP?d?j?n?b?$PL?i?5?m?n?l?e?p?5?d?m?$PP?5?b?5@
  00a8b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00a91	52		 push	 edx
  00a92	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00a97	83 c4 08	 add	 esp, 8
  00a9a	8b c8		 mov	 ecx, eax
  00a9c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00aa2	3b dc		 cmp	 ebx, esp
  00aa4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aa9	50		 push	 eax
  00aaa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00aaf	83 c4 08	 add	 esp, 8
  00ab2	8b c8		 mov	 ecx, eax
  00ab4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00aba	3b fc		 cmp	 edi, esp
  00abc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00ac1	8b c8		 mov	 ecx, eax
  00ac3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00ac9	3b f4		 cmp	 esi, esp
  00acb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 123  : 
; 124  : 	cout << "Îñòàëîñü " << birthday(year, numberDay, result) << " äíåé äî 9 íîÿáðÿ." << endl;

  00ad0	80 bd bf fe ff
	ff 00		 cmp	 BYTE PTR $T1[ebp], 0
  00ad7	75 0d		 jne	 SHORT $LN95@main
  00ad9	68 00 00 00 00	 push	 OFFSET $LN47@main
  00ade	e8 00 00 00 00	 call	 __RTC_UninitUse
  00ae3	83 c4 04	 add	 esp, 4
$LN95@main:
  00ae6	8b f4		 mov	 esi, esp
  00ae8	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00aed	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OECKIDLN@?5?d?m?e?i?5?d?n?59?5?m?n?$PP?a?p?$PP?4@
  00af2	0f b6 45 af	 movzx	 eax, BYTE PTR _result$[ebp]
  00af6	50		 push	 eax
  00af7	8b 4d a0	 mov	 ecx, DWORD PTR _numberDay$[ebp]
  00afa	51		 push	 ecx
  00afb	8b 55 dc	 mov	 edx, DWORD PTR _year$[ebp]
  00afe	52		 push	 edx
  00aff	e8 00 00 00 00	 call	 ?birthday@@YAHHH_N@Z	; birthday
  00b04	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b07	8b fc		 mov	 edi, esp
  00b09	50		 push	 eax
  00b0a	68 00 00 00 00	 push	 OFFSET ??_C@_09LJIHIGEJ@?N?q?r?$OA?k?n?q?$PM?5@
  00b0f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00b14	50		 push	 eax
  00b15	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00b1a	83 c4 08	 add	 esp, 8
  00b1d	8b c8		 mov	 ecx, eax
  00b1f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00b25	3b fc		 cmp	 edi, esp
  00b27	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b2c	50		 push	 eax
  00b2d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00b32	83 c4 08	 add	 esp, 8
  00b35	8b c8		 mov	 ecx, eax
  00b37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00b3d	3b f4		 cmp	 esi, esp
  00b3f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 125  : 
; 126  : 	return 0;

  00b44	33 c0		 xor	 eax, eax
$LN45@main:

; 127  : }

  00b46	52		 push	 edx
  00b47	8b cd		 mov	 ecx, ebp
  00b49	50		 push	 eax
  00b4a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN100@main
  00b50	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00b55	58		 pop	 eax
  00b56	5a		 pop	 edx
  00b57	5f		 pop	 edi
  00b58	5e		 pop	 esi
  00b59	5b		 pop	 ebx
  00b5a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b5d	33 cd		 xor	 ecx, ebp
  00b5f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b64	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  00b6a	3b ec		 cmp	 ebp, esp
  00b6c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b71	8b e5		 mov	 esp, ebp
  00b73	5d		 pop	 ebp
  00b74	c3		 ret	 0
  00b75	0f 1f 00	 npad	 3
$LN100@main:
  00b78	05 00 00 00	 DD	 5
  00b7c	00 00 00 00	 DD	 $LN99@main
$LN99@main:
  00b80	dc ff ff ff	 DD	 -36			; ffffffdcH
  00b84	04 00 00 00	 DD	 4
  00b88	00 00 00 00	 DD	 $LN47@main
  00b8c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00b90	04 00 00 00	 DD	 4
  00b94	00 00 00 00	 DD	 $LN49@main
  00b98	f4 ff ff ff	 DD	 -12			; fffffff4H
  00b9c	04 00 00 00	 DD	 4
  00ba0	00 00 00 00	 DD	 $LN51@main
  00ba4	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00ba8	04 00 00 00	 DD	 4
  00bac	00 00 00 00	 DD	 $LN97@main
  00bb0	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00bb4	04 00 00 00	 DD	 4
  00bb8	00 00 00 00	 DD	 $LN98@main
$LN98@main:
  00bbc	73		 DB	 115			; 00000073H
  00bbd	00		 DB	 0
$LN97@main:
  00bbe	64		 DB	 100			; 00000064H
  00bbf	61		 DB	 97			; 00000061H
  00bc0	74		 DB	 116			; 00000074H
  00bc1	65		 DB	 101			; 00000065H
  00bc2	00		 DB	 0
$LN51@main:
  00bc3	64		 DB	 100			; 00000064H
  00bc4	61		 DB	 97			; 00000061H
  00bc5	79		 DB	 121			; 00000079H
  00bc6	00		 DB	 0
$LN49@main:
  00bc7	6d		 DB	 109			; 0000006dH
  00bc8	6f		 DB	 111			; 0000006fH
  00bc9	6e		 DB	 110			; 0000006eH
  00bca	74		 DB	 116			; 00000074H
  00bcb	68		 DB	 104			; 00000068H
  00bcc	00		 DB	 0
$LN47@main:
  00bcd	79		 DB	 121			; 00000079H
  00bce	65		 DB	 101			; 00000065H
  00bcf	61		 DB	 97			; 00000061H
  00bd0	72		 DB	 114			; 00000072H
  00bd1	00		 DB	 0
  00bd2	66 90		 npad	 2
$LN96@main:
  00bd4	00 00 00 00	 DD	 $LN11@main
  00bd8	00 00 00 00	 DD	 $LN14@main
  00bdc	00 00 00 00	 DD	 $LN21@main
  00be0	00 00 00 00	 DD	 $LN23@main
  00be4	00 00 00 00	 DD	 $LN25@main
  00be8	00 00 00 00	 DD	 $LN27@main
  00bec	00 00 00 00	 DD	 $LN29@main
  00bf0	00 00 00 00	 DD	 $LN31@main
  00bf4	00 00 00 00	 DD	 $LN33@main
  00bf8	00 00 00 00	 DD	 $LN35@main
  00bfc	00 00 00 00	 DD	 $LN37@main
  00c00	00 00 00 00	 DD	 $LN39@main
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 471  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C12CFDA6_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 472  :         return static_cast<int_type>(EOF);

  00021	83 c8 ff	 or	 eax, -1

; 473  :     }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 463  :     _NODISCARD static constexpr bool eq_int_type(const int_type _Left, const int_type _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __C12CFDA6_xstring
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 464  :         return _Left == _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00028	3b 45 0c	 cmp	 eax, DWORD PTR __Right$[ebp]
  0002b	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002d	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00037	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00039	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00043	0f b6 85 3c ff
	ff ff		 movzx	 eax, BYTE PTR tv65[ebp]

; 465  :     }

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 385  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C12CFDA6_xstring
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 386  :         // find length of null-terminated string
; 387  : #if _HAS_CXX17
; 388  : #ifdef __cpp_char8_t
; 389  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 390  : #if _HAS_U8_INTRINSICS
; 391  :             return __builtin_u8strlen(_First);
; 392  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 393  :             return _Primary_char_traits::length(_First);
; 394  : #endif // ^^^ no u8 intrinsics ^^^
; 395  :         } else
; 396  : #endif // defined(__cpp_char8_t)
; 397  :         {
; 398  :             return __builtin_strlen(_First);
; 399  :         }
; 400  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00021	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4

; 402  : #endif // ^^^ !_HAS_CXX17 ^^^
; 403  :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\labs\êïî\project1\lab1\lab1\ex1.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __6BEB96EC_ex1@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\labs\êïî\project1\lab1\lab1\ex1.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __6BEB96EC_ex1@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
